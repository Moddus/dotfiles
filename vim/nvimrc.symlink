" vim-plug plugins "{{{

call plug#begin('~/.nvim/plugged')

Plug 'scrooloose/syntastic'
Plug 'itchyny/lightline.vim'
Plug 'airblade/vim-gitgutter'
Plug 'altercation/vim-colors-solarized'
Plug 'tpope/vim-surround'
Plug 'skammer/vim-css-color'

Plug 'scrooloose/nerdtree', { 'on':  'NERDTreeToggle' }
Plug 'Moddus/nerdtree_hacks', { 'on': 'NERDTreeToggle' }
Plug 'nsf/gocode', {'rtp': 'vim/'}
Plug 'Valloric/YouCompleteMe', { 'do': './install.sh --clang-completer' }
Plug 'fatih/vim-go'
Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': 'yes \| ./install' }

call plug#end()

" "}}}

" General "{{{

filetype plugin indent on
filetype plugin on
syntax on                              " syntax highlighting
set backspace=2                        " now backspace deletes characters
set backspace=2                        " now backspace deletes characters
set hlsearch                           " highlight search results.
set nocompatible                       " disable vi-incompatible mode
set enc=utf-8                          " enable utf-8 (vim internal)
set fileencoding=utf-8                 " enable utf-8 also for files
set number                             " enable line numbers
set shiftwidth=4                       " set shift width to 4 chars (in front of a line, correspondent to smarttab)
set tabstop=4                          " set tab stops to 4 chars (not in front of line)
set softtabstop=4                      " set tab stops to 4 chars (not in front of line)
set sh=zsh

" "}}}

" Commands "{{{
    
:command WQ wq
:command Wq wq
:command W	w
:command Q	q
:command Qa qa

" "}}}

" Navigation" {{{

" Use ctrl-[hjkl] to select the active split!
" <C-h> ist bugged see: https://github.com/neovim/neovim/issues/2048
" nmap <BS> <C-W>h
nmap <silent> <C-h> :wincmd h<CR>
nmap <silent> <C-l> :wincmd l<CR>
nmap <silent> <C-j> :wincmd j<CR>
nmap <silent> <C-k> :wincmd k<CR>

" Ctrl+arrow keys to switch between window
nmap <silent> <C-left>  :wincmd h<CR>
nmap <silent> <C-right> :wincmd l<CR>
nmap <silent> <C-down>  :wincmd j<CR>
nmap <silent> <C-up>    :wincmd k<CR>

" " }}}

" Terminal " {{{

:tnoremap <Esc> <C-\><C-n>
 
:tnoremap <c-h> <C-\><C-n><C-w>h
:tnoremap <c-j> <C-\><C-n><C-w>j
:tnoremap <c-k> <C-\><C-n><C-w>k
:tnoremap <c-l> <C-\><C-n><C-w>l

" " }}}

" Theme config " {{{

set background=light
colorscheme solarized

" " }}}

" lightline conig " {{{
let g:lightline = {
      \ 'colorscheme': 'solarized_light',
      \ 'component': {
      \   'readonly': '%{&readonly?"⭤":""}',
      \ },
      \ 'separator': { 'left': '⮀', 'right': '⮂' },
      \ 'subseparator': { 'left': '⮁', 'right': '⮃' }
      \ }
set laststatus=2

" " }}}

" syntastic config " {{{

set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*

let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 1
let g:syntastic_check_on_open = 1
let g:syntastic_check_on_wq = 0

let g:syntastic_mode_map = {
        \ "mode": "active",
        \ "active_filetypes": [],
        \ "passive_filetypes": ["go"] }

" " }}}

" YouCompleteMe config " {{{
let g:ycm_key_list_previous_completion=['<Up>']
let g:ycm_autoclose_preview_window_after_completion = 1
let g:ycm_autoclose_preview_window_after_insertion = 1
let g:ycm_global_ycm_extra_conf = '~/.config/ycm/.ycm_extra_conf.py'
let g:ycm_confirm_extra_conf = 0
let g:ycm_collect_identifiers_from_tags_files = 1 
" " }}}

" NERDTree " {{{

map <C-t> :NERDTreeToggle<CR>	" Toggle NERDTree ctrl + t

let NERDTreeShowBookmarks=1
let NERDTreeShowHidden=1

autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTreeType") && b:NERDTreeType == "primary") | q | endif		" autoclose NERDTree if last open

" " }}}

" CtrlP config " {{{

" search in:
" 'a' the directory of the current file, unless it is a subdirectory of the cwd
" 'r' the nearest ancestor of the current file that contains one of these directories or files: .git .hg .svn .bzr _darcs
let g:ctrlp_working_path_mode = 'ra'

" If none of the default markers (.git .hg .svn .bzr _darcs) are present in a project
let g:ctrlp_root_markers = ['pom.xml', 'build.gradle', 'Makefile', 'app.yml', "build.xml", "ivy.xml"]

" Custom file ignore
let g:ctrlp_custom_ignore = { 
	\ 'dir': '\v(\.(idea|gitmodules)$)|CMakeFiles',
	\ 'file' : '\v(.*\.(cmake|pyc|a|amm))|CMakeCache.txt|CMakeLists.txt.user',
	\ }

" " }}}

" go-vim " {{{

" Activate syntax highligthing
let g:go_highlight_functions = 1
let g:go_highlight_methods = 1
let g:go_highlight_structs = 1
let g:go_highlight_operators = 1
let g:go_highlight_build_constraints = 1

" gofmt and import on save
let g:go_fmt_command = "goimports"

" " }}}

" FZF " {{{
set rtp+=~/.fzf

nnoremap <c-p> :FZF<cr>

" " }}}

" special functions " {{{

" auto close quickfix windows
aug QFClose
  au!
  au WinEnter * if winnr('$') == 1 && getbufvar(winbufnr(winnr()), "&buftype") == "quickfix"|q|endif
aug END

" " }}}

" File edit mappigs " {{{

" delete empty lines in a file
" :g/^$/d

" " }}}
