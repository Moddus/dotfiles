" Vundle plugins "{{{

filetype off				" required for vundle

set rtp+=~/.vim/bundle/vundle/
call vundle#rc()

" let Vundle manage Vundle. Required!
Bundle 'gmarik/vundle'

"
" My Bundles
"

" File browser
Bundle 'scrooloose/nerdtree'
" Show compiler errors
" Bundle 'scrooloose/syntastic'
Bundle 'SirVer/ultisnips'
Bundle 'majutsushi/tagbar'
"Bundle 'bufexplorer.zip'
Bundle 'AutoTag'
Bundle 'a.vim'
" ag optimized search tool like grep
Bundle 'rking/ag.vim'
" ack optimized tool for code searching
" Bundle 'mileszs/ack.vim'
" git information on left side
Bundle 'airblade/vim-gitgutter'
" golang autocomplete plugin
Bundle 'vim-ruby/vim-ruby'
Bundle 'Blackrush/vim-gocode'
" file information plugin
Bundle 'bling/vim-airline'
" open files
Bundle 'kien/ctrlp.vim'
" colorschemes
Bundle 'wombat256.vim'
Bundle 'nanotech/jellybeans.vim'
Bundle 'ervandew/supertab'
Bundle 'Valloric/YouCompleteMe'
Bundle 'plasticboy/vim-markdown'
Bundle 'altercation/vim-colors-solarized'
Bundle 'jansenm/vim-cmake'
Bundle 'tpope/vim-fugitive'
" "}}}

filetype plugin indent on

" filetype plugin on          " enable after vundle
" filetype indent on          " enable after vundle

:set term=builtin_ansi

" Plugins configuration "{{{

let g:tagbar_width = 50

" special mapping for senf (jump between files)
let g:alternateExtensions_cc = "hh,ih"
let g:alternateExtensions_ct = "hh,ih"
let g:alternateExtensions_cti = "hh,ih"
let g:alternateExtensions_cci = "hh,ih"
let g:alternateExtensions_hh = "cc,cci,ct,cti"
let g:alternateExtensions_ih = "cc,cci,ct,cti"

" ycm settings
let g:ycm_autoclose_preview_window_after_completion = 1
let g:ycm_autoclose_preview_window_after_insertion = 1
let g:ycm_global_ycm_extra_conf = '~/.config/ycm/.ycm_extra_conf.py'
nnoremap <C-j-d> :YcmCompleter GoToDefinitionElseDeclaration<CR>

" syntastic
let g:syntastic_error_symbol = '✗✗'
let g:syntastic_warning_symbol = '⚠⚠'
let g:syntastic_stl_format = '[%E{Err: %fe #%e}%B{, }%W{Warn: %fw #%w}]'
let g:syntastic_always_populate_loc_list=1
let g:syntastic_auto_loc_list=1
let g:syntastic_python_checkers=['pylint']
let g:syntastic_go_checkers=['golint']
"let g:syntastic_c_checkers=['gcc']

set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*

" UltiSnips
let g:UltiSnipsExpandTrigger="<C-j>"
let g:UltiSnipsJumpForwardTrigger="<C-j>"
let g:UltiSnipsJumpBackwardTrigger="<C-k>"

" NERDtree
let NERDTreeShowBookmarks=1
let NERDTreeShowHidden=1

" Ctrlp
let g:ctrlp_custom_ignore = {
  \ 'dir':  '\v[\/]\.(git|hg|svn)$',
  \ 'file': '\v\.(exe|so|dll)$',
  \ 'link': '',
  \ }

" SuperTab
let g:SuperTabDefaultCompletionType = "context"

" Omni
" no preview window
set completeopt-=preview
set completeopt+=longest

" Tagbar
let g:tagbar_type_go = {
    \ 'ctagstype' : 'go',
    \ 'kinds'     : [
        \ 'p:package',
        \ 'i:imports:1',
        \ 'c:constants',
        \ 'v:variables',
        \ 't:types',
        \ 'n:interfaces',
        \ 'w:fields',
        \ 'e:embedded',
        \ 'm:methods',
        \ 'r:constructor',
        \ 'f:functions'
    \ ],
    \ 'sro' : '.',
    \ 'kind2scope' : {
        \ 't' : 'ctype',
        \ 'n' : 'ntype'
    \ },
    \ 'scope2kind' : {
        \ 'ctype' : 't',
        \ 'ntype' : 'n'
    \ },
    \ 'ctagsbin'  : 'gotags',
    \ 'ctagsargs' : '-sort -silent'
    \ }

" Scala
let g:scala_sort_across_groups=1

" Airline
let g:airline#extensions#tabline#enabled=2 
set laststatus=2

" "}}}

" General "{{{

syntax on                              " syntax highlighting
set backspace=2                        " now backspace deletes characters
set hlsearch                           " highlight search results.

set omnifunc=syntaxcomplete#Complete

set nocompatible                       " disable vi-incompatible mode
set enc=utf-8                          " enable utf-8 (vim internal)
set fileencoding=utf-8                 " enable utf-8 also for files
set number                             " enable line numbers
set nowrap                             " disable line wrapping after 80 chars
set foldmethod=marker                  " enable folding by markers
set smartindent                        " enable autoindenting for a new line
set smarttab                           " enable smart tabbing
set shiftwidth=4                       " set shift width to 4 chars (in front of a line, correspondent to smarttab)
set tabstop=4                          " set tab stops to 4 chars (not in front of line)
set softtabstop=4                      " set tab stops to 4 chars (not in front of line)
set expandtab    
set cursorline                         " mark current line
set tags=./tags;/                      " look for a tag file (from current folder until root .)
set wildmode=longest,list,full         " behave more unix like (complete as much as possible)
set wildmenu                           " activate wildmenu

set ignorecase
set smartcase

set t_Co=256                           " activate 256 colors
" colorscheme wombat256mod               " enable color scheme
" colorscheme jellybeans
set background=dark                    " using a dark terminal
colorscheme solarized
:hi Error ctermfg=Red ctermbg=242      " especially for wombat + syntastic (gray background instead of red)

" save foldings
set viewoptions=folds,cursor           " save cursor position and folding on :mkview
set autowriteall                       " automatically save file when leaving a modified buffer
au BufWinLeave * silent! mkview
au BufWinEnter * silent! loadview

" switch between absolute and relativ line number 
function! NumberToggle()
      if(&relativenumber == 1)
        set number
      else
        set nonumber
        set relativenumber
     endif
endfunc

nnoremap <C-l> :call NumberToggle()<cr>

" switch between absolute and relative line number
" after focus lost
autocmd InsertEnter * :set number
autocmd InsertLeave * :set relativenumber

" Use Silver Searcher instead of grep
set grepprg=ag

" "}}}

" Commands "{{{
    
:command WQ wq
:command Wq wq
:command W w
:command Q q

" }}}

" Mapping "{{{

" map f :Ag<CR>

" Toogle ctrlp
map O :CtrlP<CR>

" Toogle TagList
map P :TagbarToggle<CR>

" Toogle BufferLis
" map B :BufExplorer<CR>

" Toogle NERDTree
map T :NERDTreeToggle<CR>

" Window switching
map <silent> <A-Up> :wincmd k<CR>
map <silent> <A-Down> :wincmd j<CR>
map <silent> <A-Left> :wincmd h<CR>
map <silent> <A-Right> :wincmd l<CR>

" write file from non root
cmap w!! w !sudo tee % >/dev/null<CR>:e!<CR><CR>

" General
imap <C-s> <esc>:w<CR>

nnoremap dc da"

" move line current +1
nnoremap <A-j> :m .+1<CR>
" move line current -2
nnoremap <A-k> :m .-2<CR>

noremap <Up> <NOP>
noremap <Down> <NOP>
noremap <Left> <NOP>
noremap <Right> <NOP>

" fast hexmode
map <Leader>hon :%!xxd<CR>
map <Leader>hof :%!xxd -r<CR>

" "}}}

" File specific "{{{

" indent xml files
au FileType xml setlocal equalprg=xmllint\ --format\ --recover\ -\ 2>/dev/null

" indent html files
au FileType html setlocal equalprg=xmllint\ --format\ --recover\ --html\ --htmlout\ -\ 2>/dev/null


" gofmt on save go files
" au FileType go au BufWritePre <buffer> Fmt

" force cpp files
au BufRead,BufNewFile *.cci,*.cti,*.ih,*.ct set filetype=cpp

" auto-generate for go files on save
" au BufWritePost *.go silent! !gotags >> tags &

" auto-generate for ctags
" au BufWritePost *.c,*.cpp,*.h silent! !ctags -R &
" "}}}

